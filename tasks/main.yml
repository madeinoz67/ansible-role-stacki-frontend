---

- name: Push global Stacki configuration databases
  copy:
    src: "{{ item }}"
    dest: /var/tmp/
    owner: root
    group: root
    mode: u=rwX,go-rwx
  with_items:
    - netsheet.csv
  tags: loadfiles

# there is no way to nuke the hosts db; this provides a means to "forget" a
#+ host; just move the host line(s) from the kicksheet to the un-kicksheet
- name: Push the un-kicksheet
  copy:
    src: unkicksheet.csv
    dest: /var/tmp/unkicksheet.csv
    owner: root
    group: root
    mode: u=rwX,go-rwx
  tags: loadfiles

- name: Push the kicksheet that matches the last group name in the ansible hosts inventory and OS major version
  copy:
    src: "{{ group_names | last }}-{{ ansible_os_family }}{{ ansible_distribution_major_version }}-kicksheet.csv"
    dest: /var/tmp/kicksheet.csv
    owner: root
    group: root
    mode: u=rwX,go-rwx
  tags: loadfiles

- name: Push the storage partition sheet that matches the last group name in the ansible hosts inventory and OS major version
  template:
    src: "{{ group_names | last }}-{{ ansible_os_family }}{{ ansible_distribution_major_version }}-storage.csv"
    dest: /var/tmp/storage.csv
    owner: root
    group: root
    mode: u=rwX,go-rwx
  tags: loadfiles

- name: create appliance
  shell: "/opt/stack/bin/stack add appliance {{ stacki_appliance }}"
  register: command_result
  failed_when: command_result|failed and 'already exists' not in command_result.stderr
  tags: appliance

- name: Load netsheet
  shell: "/opt/stack/bin/stack load networkfile file=/var/tmp/netsheet.csv"
  tags: loadfiles

- name: Load kicksheet
  shell: "/opt/stack/bin/stack load hostfile file=/var/tmp/kicksheet.csv"
  tags: loadfiles

- name: Load storage sheet
  shell: "/opt/stack/bin/stack load storage partition file=/var/tmp/storage.csv"
  tags: loadfiles

- name: Unload un-kicksheet
  shell: "/opt/stack/bin/stack unload hostfile file=/var/tmp/unkicksheet.csv"
  tags: loadfiles

  #- name: Load attrfile
  #shell: "/opt/stack/bin/stack set attr=Kickstart_PrivateNTPHost value={{ item }}"
  #tags: loadfiles
  #with_items: 

- name: Add Stacki carts
  shell: "/opt/stack/bin/stack add cart {{ item | basename }}"
  with_lines:
    - "/bin/ls -1d {{ role_path }}/files/export/stack/carts/*"
  register: command_result
  failed_when: command_result|failed and 'cart exists' not in command_result.stderr
  tags: addcarts

- name: Enable Stacki carts
  shell: "/opt/stack/bin/stack enable cart {{ item | basename }} box=default"
  with_lines:
    - "/bin/ls -1d {{ role_path }}/files/export/stack/carts/*"
  register: command_result
  failed_when: command_result|failed and 'cart exists' not in command_result.stderr
  tags: addcarts

- name: Set appliance host boot method to install
  shell: "/opt/stack/bin/stack set host boot {{ stacki_appliance }} action=install"
  tags: destroyos

- name: Set appliance host attribute nukedisks
  shell: "/opt/stack/bin/stack set host attr {{ stacki_appliance }} attr=nukedisks value=true"
  tags: nukedisks

- name: Push Stacki cart configs
  copy:
    src: export/stack/carts/
    dest: /export/stack/
    owner: root
    group: root
    mode: u=rwX,go-rwx

- name: stack sync config
  shell: "/opt/stack/bin/stack sync config"

...
